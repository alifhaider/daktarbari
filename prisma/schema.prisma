// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  doctor Doctor?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings   Booking[]
  reviews    Review[]

  image       UserImage?
  password    Password?

  roles       Role[]
  sessions    Session[]
  
  connections Connection[]
  
  passkey     Passkey[]
}

model Doctor {
  id      String  @id @default(cuid())

  homeAddress String?

  balance Int @default(0)
  currency String @default("TAKA")
  
  specialties DoctorSpecialty[]

  experiences Experience[]
 
  education Education[]
  bio       String

  schedules Schedule[]
  bookings Booking[]

  doctorPopularty DoctorPopularty?

  rating Int @default(0)
  reviews Review[]

  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Education {
  id     String  @id @default(cuid())
  degree String
  institute String
  year   String?

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Schedule {
  id String @id @default(cuid())

  doctor   Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  location   ScheduleLocation @relation(fields: [locationId], references: [id])
  locationId String

  serialFee Int?
  discountFee Int?
  visitFee Int?
  depositAmount Int?

  startTime DateTime
  endTime   DateTime

  maxAppointments Int
  bookings    Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ScheduleLocation {
  id        String     @id @default(cuid())
  name      String
  address   String
  city      String
  state     String?
  zip       String?
  country   String?
  latitude  Float?
  longitude Float?

  images LocationImage[]
  type String

  schedules Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Booking {
  id String @id @default(cuid())

  name String?
  phone String?
  note String?

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  status String? @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Review {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  rating Int
  comment String

  user  User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorSpecialty {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  name String
  description String?
  image String?

  specialtyPopularty SpecialtyPopularty?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model DoctorPopularty {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String @unique

  views Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([views])
}

model SpecialtyPopularty {
  id String @id @default(cuid())

  doctorSpecialty DoctorSpecialty @relation(fields: [doctorSpecialtyId], references: [id])
  doctorSpecialtyId String @unique

  views Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([views])
}

model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model LocationImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location   ScheduleLocation @relation(fields: [locationId], references: [id])
  locationId String
}

model Experience {
  id String @id @default(cuid())
  title String
  description String?
  startDate DateTime
  endDate DateTime?

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}
